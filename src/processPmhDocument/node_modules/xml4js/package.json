{
  "name": "xml4js",
  "description": "XML to JavaScript parser using XML Schema to guide conversion.",
  "keywords": [
    "xml",
    "json",
    "schema",
    "xsd"
  ],
  "homepage": "https://github.com/peerlibrary/node-xml4js",
  "version": "0.1.2",
  "dependencies": {
    "xml2js": "git+https://github.com/peerlibrary/node-xml2js.git#peerlibrary",
    "underscore": "1.6.x",
    "async": "0.9.x",
    "request": "2.36.x",
    "moment": "2.7.x"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/peerlibrary/node-xml4js.git"
  },
  "license": "BSD-3-Clause",
  "bin": {
    "xml4json": "./xml4json.js"
  },
  "main": "./xml4js.js",
  "readme": "node-xml4js\n===========\n\n`node-xml4js` is a [Node.js](nodejs.org) package providing an XML to JavaScript parser using XML Schema to guide\nconversion. Main motivation is that instead of guessing the structure of an XML document from the document itself,\nstructure is created automatically from the XML Schema which makes output consistent for all XML documents, not just\none at hand. For example, arrays are always arrays even when there is only one element in the particular XML document,\nand if there is only one element allowed, then there will be no one-element array wrapped around. This makes\nprogrammatically traversing the structure much easier, because structure is consistent and predictable.\n\nPackage builds upon [node-xml2js](https://github.com/Leonidas-from-XIV/node-xml2js), detects and parses XML Schema\nwhich is then used to transform JavaScript object into a consistent schema-driven structure. API follows that of\n`node-xml2js`. By default it maps attributes to `$` field and values to `_` field. Values are converted from strings\nto corresponding reasonable JavaScript type.\n\nExamples\n--------\n\nXML taken from [XML Primer](http://www.w3.org/TR/xmlschema-0/#po.xml):\n\n```xml\n<?xml version=\"1.0\"?>\n<purchaseOrder orderDate=\"1999-10-20\" xmlns=\"http://www.example.com/PO\">\n   <shipTo country=\"US\">\n      <name>Alice Smith</name>\n      <street>123 Maple Street</street>\n      <city>Mill Valley</city>\n      <state>CA</state>\n      <zip>90952</zip>\n   </shipTo>\n   <billTo country=\"US\">\n      <name>Robert Smith</name>\n      <street>8 Oak Avenue</street>\n      <city>Old Town</city>\n      <state>PA</state>\n      <zip>95819</zip>\n   </billTo>\n   <comment>Hurry, my lawn is going wild!</comment>\n   <items>\n      <item partNum=\"872-AA\">\n         <productName>Lawnmower</productName>\n         <quantity>1</quantity>\n         <USPrice>148.95</USPrice>\n         <comment>Confirm this is electric</comment>\n      </item>\n      <item partNum=\"926-AA\">\n         <productName>Baby Monitor</productName>\n         <quantity>1</quantity>\n         <USPrice>39.98</USPrice>\n         <shipDate>1999-05-21</shipDate>\n      </item>\n   </items>\n</purchaseOrder>\n```\n\nWithout using a XML Schema to guide a conversion process, with explicit arrays turned on, you would get:\n\n```json\n{\n  \"purchaseOrder\": {\n    \"$\": {\n      \"orderDate\": \"1999-10-20\",\n      \"xmlns\": \"http://www.example.com/PO\"\n    },\n    \"shipTo\": [\n      {\n        \"$\": {\n          \"country\": \"US\"\n        },\n        \"name\": [\n          \"Alice Smith\"\n        ],\n        \"street\": [\n          \"123 Maple Street\"\n        ],\n        \"city\": [\n          \"Mill Valley\"\n        ],\n        \"state\": [\n          \"CA\"\n        ],\n        \"zip\": [\n          \"90952\"\n        ]\n      }\n    ],\n    \"billTo\": [\n      {\n        \"$\": {\n          \"country\": \"US\"\n        },\n        \"name\": [\n          \"Robert Smith\"\n        ],\n        \"street\": [\n          \"8 Oak Avenue\"\n        ],\n        \"city\": [\n          \"Old Town\"\n        ],\n        \"state\": [\n          \"PA\"\n        ],\n        \"zip\": [\n          \"95819\"\n        ]\n      }\n    ],\n    \"comment\": [\n      \"Hurry, my lawn is going wild!\"\n    ],\n    \"items\": [\n      {\n        \"item\": [\n          {\n            \"$\": {\n              \"partNum\": \"872-AA\"\n            },\n            \"productName\": [\n              \"Lawnmower\"\n            ],\n            \"quantity\": [\n              \"1\"\n            ],\n            \"USPrice\": [\n              \"148.95\"\n            ],\n            \"comment\": [\n              \"Confirm this is electric\"\n            ]\n          },\n          {\n            \"$\": {\n              \"partNum\": \"926-AA\"\n            },\n            \"productName\": [\n              \"Baby Monitor\"\n            ],\n            \"quantity\": [\n              \"1\"\n            ],\n            \"USPrice\": [\n              \"39.98\"\n            ],\n            \"shipDate\": [\n              \"1999-05-21\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nBut this package gives you this:\n\n```json\n{\n  \"purchaseOrder\": {\n    \"$\": {\n      \"orderDate\": \"1999-10-20T00:00:00.000Z\"\n    },\n    \"shipTo\": {\n      \"$\": {\n        \"country\": \"US\"\n      },\n      \"name\": \"Alice Smith\",\n      \"street\": \"123 Maple Street\",\n      \"city\": \"Mill Valley\",\n      \"state\": \"CA\",\n      \"zip\": 90952\n    },\n    \"billTo\": {\n      \"$\": {\n        \"country\": \"US\"\n      },\n      \"name\": \"Robert Smith\",\n      \"street\": \"8 Oak Avenue\",\n      \"city\": \"Old Town\",\n      \"state\": \"PA\",\n      \"zip\": 95819\n    },\n    \"comment\": \"Hurry, my lawn is going wild!\",\n    \"items\": {\n      \"item\": [\n        {\n          \"$\": {\n            \"partNum\": \"872-AA\"\n          },\n          \"productName\": \"Lawnmower\",\n          \"quantity\": 1,\n          \"USPrice\": 148.95,\n          \"comment\": \"Confirm this is electric\"\n        },\n        {\n          \"$\": {\n            \"partNum\": \"926-AA\"\n          },\n          \"productName\": \"Baby Monitor\",\n          \"quantity\": 1,\n          \"USPrice\": 39.98,\n          \"shipDate\": \"1999-05-21T00:00:00.000Z\"\n        }\n      ]\n    }\n  }\n}\n```\n\nInstallation\n------------\n\nYou can use [npm](https://npmjs.org/) to install it with:\n\n```\nnpm install xml4js\n```\n\nUsage\n-----\n\n```javascript\nvar util = require('util');\nvar xml4js = require('xml4js');\n\n// Will automatically download and use any missing schemas\nxml4js.parseString(xml, {downloadSchemas: true}, function (err, result) {\n    console.log(util.inspect(result, false, null));\n});\n```\n\n```javascript\nvar fs = require('fs');\nvar util = require('util');\nvar xml4js = require('xml4js');\n\n// Most of xml2js options should still work\nvar options = {};\nvar parser = new xml4js.Parser(options);\n\n// Default is to not download schemas automatically, so we should add it manually\nvar schema = fs.readFileSync('schema.xsd', {encoding: 'utf-8'});\nparser.addSchema('http://www.example.com/Schema', schema, function (err, importsAndIncludes) {\n    // importsAndIncludes contains schemas to be added as well to satisfy all imports and includes found in schema.xsd\n    parser.parseString(xml, function (err, result) {\n        console.log(util.inspect(result, false, null));\n    });\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peerlibrary/node-xml4js/issues"
  },
  "_id": "xml4js@0.1.2",
  "_from": "xml4js@>= 0.1.2"
}
