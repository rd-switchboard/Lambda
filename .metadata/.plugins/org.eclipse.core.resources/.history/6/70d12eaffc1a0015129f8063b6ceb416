var async = require('async');
var xml4js = require('xml4js');
var util = require('util');
var fs = require('fs');
var _ = require('underscore');

var schemas = {
	"http://www.openarchives.org/OAI/2.0/" : "xsd/OAI-PMH.xsd",
	"http://ands.org.au/standards/rif-cs/registryObjects" : [ 
	     "xsd/registryObjects.xsd", 
	     "xsd/activity.xsd",
	     "xsd/collection.xsd",
	     "xsd/party.xsd",	     
	     "xsd/service.xsd",	     
	     "xsd/registryTypes.xsd"	     
    ],
	"http://ands.org.au/standards/rif-cs/extendedRegistryObjects" : "extRif.xsd"
};

console.log("Ceating xml parser");

var parser = new xml4js.Parser();

async.each(_.keys(schemas), function (namespace, cb) {
    var files = schemas[namespace];
    if (!_.isArray(files)) {
      files = [files];
    }
    async.each(files, function (file, cb) {
      var content = fs.readFileSync(file, {encoding: 'utf-8'});
      parser.addSchema(namespace, content, cb);
    }, cb)
  }, function (err) {
	    if (err) {
	        console.error('' + err);
	        process.exit(2);
	        return;
	      }
	    
	    process.stdin.resume();
	    process.stdin.setEncoding('utf-8');

console.log("Loading schema");

var pmh = fs.readFileSync('xsd/OAI-PMH.xsd', {encoding: 'utf-8'});

console.log("Loading XML");

var xml = fs.readFileSync('xml/0.xml', {encoding: 'utf-8'});

console.log("Adding schema");

parser.addSchema('http://www.openarchives.org/OAI/2.0/', pmh, function (err, importsAndIncludes) {
    if (err) 
        console.log("Schema Error: " + err);	
    // importsAndIncludes contains schemas to be added as well to satisfy all imports and includes found in schema.xsd 
    else 
	    parser.parseString(xml, function (err, result) {
	        if (err) 
	            console.log("Parse Error: " + err);	
	        else
	        	console.log(util.inspect(result, false, null));
	    });
});
  });
}
/*
xml4js.parseString(xml, {downloadSchemas: true}, function (err, result) {
   console.log("Parsing is finished");
   if (err) 
      console.log("Error: " + err);	
   else
      console.log(util.inspect(result, false, null));
});
*/
